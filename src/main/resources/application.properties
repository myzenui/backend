spring.application.name=demo
spring.profiles.active=dev

# DevTools configurations for hot reload
spring.devtools.restart.enabled=true
spring.devtools.livereload.enabled=true
spring.devtools.restart.additional-exclude=**/*.log,**/*.tmp,**/*.properties,**/*.yml,**/*.yaml
spring.devtools.restart.trigger-file=.reloadtrigger
# Reduce restart frequency to minimize Firestore connection issues
spring.devtools.restart.poll-interval=2s
spring.devtools.restart.quiet-period=1s

# For Spring Boot 2.2+ - Enable JMX for VS Code/Cursor integration
spring.jmx.enabled=true

# Firebase Configuration
# Option 1 (Recommended): Use gcloud auth for Application Default Credentials
# Run: gcloud auth application-default login
# Or for service accounts: gcloud auth activate-service-account --key-file=path/to/key.json
firebase.project.id=${FIREBASE_PROJECT_ID:myzenui}

# Option 2: Provide credentials directly (Not Recommended)
# Instead, set the GOOGLE_APPLICATION_CREDENTIALS environment variable
# to point to your service account JSON file.
# Example: export GOOGLE_APPLICATION_CREDENTIALS="/path/to/your/key.json"

# Spring AI Gemini Configuration
spring.ai.vertex.ai.gemini.project-id=${VERTEX_AI_GEMINI_PROJECT_ID:myzenui}
spring.ai.vertex.ai.gemini.location=${VERTEX_AI_GEMINI_LOCATION:us-central1}
#spring.ai.vertex.ai.gemini.chat.options.model=gemini-2.0-flash
spring.ai.vertex.ai.gemini.chat.options.model=gemini-2.5-pro
spring.ai.vertex.ai.gemini.chat.options.temperature=0.7


spring.ai.chat.memory.repository.jdbc.initialize-schema=always

# SQL Server Database Configuration
spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=myzen;encrypt=true;trustServerCertificate=true
spring.datasource.username=sa
spring.datasource.password=rootpass
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver

# Preview Database Configuration
database.preview.url=${PREVIEW_DB_URL:jdbc:sqlserver://localhost:1433;databaseName=myzen_preview;encrypt=true;trustServerCertificate=true}
database.preview.username=${PREVIEW_DB_USERNAME:sa}
database.preview.password=${PREVIEW_DB_PASSWORD:rootpass}
database.preview.driver-class-name=${PREVIEW_DB_DRIVER:com.microsoft.sqlserver.jdbc.SQLServerDriver}

# Production Database Configuration
database.production.url=${PRODUCTION_DB_URL:jdbc:sqlserver://localhost:1433;databaseName=myzen_production;encrypt=true;trustServerCertificate=true}
database.production.username=${PRODUCTION_DB_USERNAME:sa}
database.production.password=${PRODUCTION_DB_PASSWORD:rootpass}
database.production.driver-class-name=${PRODUCTION_DB_DRIVER:com.microsoft.sqlserver.jdbc.SQLServerDriver}

# Hibernate Configuration for SQL Server
spring.jpa.database-platform=org.hibernate.dialect.SQLServerDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql_comments=true

# Connection Pool Configuration
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=600000

logging.level.org.springframework.ai=DEBUG

# Preview Service Configuration
preview.docker.image=${PREVIEW_DOCKER_IMAGE:myzen/devcontainer:3}

# Cloudflare Configuration
# Get your API token from: https://dash.cloudflare.com/profile/api-tokens
# Required scopes: Zone:Edit, DNS:Edit, Cloudflare Tunnel:Edit
cloudflare.api.token=${CLOUDFLARE_API_TOKEN:your-api-token-here}
# Zone ID can be found in the Cloudflare dashboard under domain overview
cloudflare.zone.id=${CLOUDFLARE_ZONE_ID:your-zone-id-here}
# Account ID can be found in the Cloudflare dashboard right sidebar
cloudflare.account.id=${CLOUDFLARE_ACCOUNT_ID:your-account-id-here}
# Tunnel ID (defaults to the provided tunnel ID)
cloudflare.tunnel.id=${CLOUDFLARE_TUNNEL_ID:7a1dbacd-f34f-4662-81bc-6ee718f898e7}
# Cloudflare API base URL (usually no need to change)
cloudflare.api.base-url=${CLOUDFLARE_API_BASE_URL:https://api.cloudflare.com/client/v4}

github.token=${GITHUB_TOKEN}
github.username=${GITHUB_USERNAME}
spring.ai.openai.api-key=${SPRING_AI_OPENAI_API_KEY}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

